<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Knowledge Graphs on AI Reasoning</title>
    <link>http://localhost:1313/ai-workflows/alignment-reasoning/graph-reasoning/knowledge-graphs/</link>
    <description>Recent content in Knowledge Graphs on AI Reasoning</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/ai-workflows/alignment-reasoning/graph-reasoning/knowledge-graphs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Neo4j GDS (Graph Data Science) vs. Core Neo4j (Cypher)</title>
      <link>http://localhost:1313/ai-workflows/alignment-reasoning/graph-reasoning/knowledge-graphs/gds_vs_cypher/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ai-workflows/alignment-reasoning/graph-reasoning/knowledge-graphs/gds_vs_cypher/</guid>
      <description>&lt;h2 id=&#34;neo4j-gds-graph-data-science-vs-core-neo4j-cypher&#34;&gt;&#xA;  Neo4j GDS (Graph Data Science) vs. Core Neo4j (Cypher)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#neo4j-gds-graph-data-science-vs-core-neo4j-cypher&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1-purpose-comparison&#34;&gt;&#xA;  1. Purpose Comparison&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-purpose-comparison&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Aspect&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Neo4j (Cypher)&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;GDS (Graph Data Science)&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Primary Purpose&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Transactional queries, CRUD operations&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Graph analytics, algorithms, machine learning&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Execution&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Works directly on disk database&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Projects optimized graph into memory&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Speed&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Good for pattern match and retrieval&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Fast for graph-wide computations&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Scale&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Suited for operational systems&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Handles millions-billions of nodes/relationships&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Isolation&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Operates on live data&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Safe, read-only in-memory graphs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Good for flexible queries&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Pre-built scalable algorithms (PageRank, Louvain, etc.)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Optimization&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Query optimization on indexes&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Memory-efficient subgraph projection&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Persistence&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Directly modifies database (unless read-only)&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Results can stay in memory or optionally write back&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;2-summary-flow-of-gds-workflow&#34;&gt;&#xA;  2. Summary Flow of GDS Workflow&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-summary-flow-of-gds-workflow&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Step&lt;/th&gt;&#xA;          &lt;th&gt;Cypher Call&lt;/th&gt;&#xA;          &lt;th&gt;Purpose&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;① Project Graph&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;gds.graph.project&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Create an in-memory optimized graph&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;② List Graphs&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;gds.graph.list&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Manage in-memory graph catalog&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;③ Run Algorithm (Mutate)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;gds.pageRank.mutate&lt;/code&gt;, &lt;code&gt;gds.degree.mutate&lt;/code&gt;, etc.&lt;/td&gt;&#xA;          &lt;td&gt;Compute and store properties in memory&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;④ Stream Results&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;gds.graph.nodeProperties.stream&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Retrieve computed properties&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;⑤ (Optional) Write to DB&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;gds.pageRank.write&lt;/code&gt;, etc.&lt;/td&gt;&#xA;          &lt;td&gt;Persist computed results to database&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;⑥ Drop Graph&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;gds.graph.drop&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Free memory by deleting in-memory graphs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4c4f69;background-color:#eff1f5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// Neo4j GDS Flow Diagram&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+----------------+   +-----------------------+   +----------------------+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| Neo4j Database |==&amp;gt;|  GDS Graph Projection |==&amp;gt;|  Graph Catalog       |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| (Stored Nodes, |   |  (In-Memory Subgraph) |   | (Manage In-Memory    |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|  Relationships)|   |                       |   |  Graphs: List, Drop) |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+----------------+   +-----------------------+   +----------------------+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                           ||&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                           ||&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                           \/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                 +---------------------+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                 |   GDS Algorithms    |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                 |  (PageRank,         |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                 |  Community Detect., |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                 |  Similarity, ML)    |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                 +---------------------+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                           ||&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                           ||&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                           \/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                 +---------------------+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                 |      Results        |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                 | (Mutate, Write back,|&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                 |  Stream to client)  |&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                 +---------------------+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-example-gds-workflow-code-snippet-impossible-by-cypher-alone&#34;&gt;&#xA;  3. Example: GDS Workflow Code Snippet (Impossible by Cypher Alone)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-example-gds-workflow-code-snippet-impossible-by-cypher-alone&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-cypher&#34; data-lang=&#34;cypher&#34;&gt;// Project graph into memory&#xA;CALL gds.graph.project(&#xA;  &amp;#39;friends-graph&amp;#39;,&#xA;  &amp;#39;Person&amp;#39;,&#xA;  &amp;#39;FRIEND&amp;#39;&#xA;);&#xA;&#xA;// Run PageRank algorithm and store scores in memory&#xA;CALL gds.pageRank.mutate(&#xA;  &amp;#39;friends-graph&amp;#39;,&#xA;  { mutateProperty: &amp;#39;pageRankScore&amp;#39; }&#xA;);&#xA;&#xA;// Stream top PageRank results&#xA;CALL gds.graph.nodeProperties.stream(&#xA;  &amp;#39;friends-graph&amp;#39;,&#xA;  [&amp;#39;pageRankScore&amp;#39;]&#xA;)&#xA;YIELD nodeId, propertyValue&#xA;RETURN gds.util.asNode(nodeId).name AS personName, propertyValue AS pageRankScore&#xA;ORDER BY pageRankScore DESC&#xA;LIMIT 10;&#xA;&#xA;// Clean up memory&#xA;CALL gds.graph.drop(&amp;#39;friends-graph&amp;#39;);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;🚀 This full in-memory graph analysis flow &lt;strong&gt;cannot be achieved&lt;/strong&gt; using Cypher alone.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
